{"version":3,"sources":["formTinhTong/TinhTong.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["tinhTong","props","className","value","onChange","changed","required","type","placeholder","placeHolder","App","state","result","value1","value2","updateValue1","event","setState","target","console","log","parseInt","updateValue2","Sum","toString","src","logo","alt","href","rel","id","TinhTong","this","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"2PAgBeA,G,MAdE,SAACC,GACd,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,YACX,mDAAeD,EAAME,MAArB,MAGJ,yBAAKD,UAAU,YACX,2BAAOA,UAAU,eAAeE,SAAUH,EAAMI,QAASC,UAAQ,EAACC,KAAK,SAASC,YAAaP,EAAMQ,kBCqFpGC,E,2MAzFbC,MAAQ,CACNC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,I,EAGVC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZJ,OAAQG,EAAME,OAAOf,QAEvBgB,QAAQC,IAAIC,SAAS,EAAKV,MAAME,U,EAGlCS,aAAe,SAACN,GACd,EAAKC,SAAS,CACZH,OAAQE,EAAME,OAAOf,S,EAIzBoB,IAAM,WACJ,EAAKN,SAAS,CACZL,QAASS,SAAS,EAAKV,MAAME,OAAO,IAAMQ,SAAS,EAAKV,MAAMG,OAAO,KAAKU,aAE5EL,QAAQC,IAAI,EAAKT,MAAMC,S,wEAIvB,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKuB,IAAKC,IAAMxB,UAAU,WAAWyB,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEzB,UAAU,WACV0B,KAAK,sBACLV,OAAO,SACPW,IAAI,uBAJN,gBAUF,yBAAK3B,UAAU,WAAW4B,GAAG,YAC3B,yBAAK5B,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,kDAEF,6BACA,6BACA,kBAAC6B,EAAD,CACE5B,MAAQ,IACRM,YAAc,uCACdJ,QAAS2B,KAAKjB,eAEhB,kBAACgB,EAAD,CACE5B,MAAQ,IACRM,YAAc,iCACdJ,QAAS2B,KAAKV,eAEhB,yBAAKpB,UAAU,iBACb,yBAAKA,UAAU,YACb,2BAAO4B,GAAG,MAAV,uBAEF,yBAAK5B,UAAU,YACb,2BAAO+B,UAAQ,EAAC9B,MAAO6B,KAAKrB,MAAMC,OAAQV,UAAU,mBAGxD,6BACA,6BACA,yBAAKA,UAAU,aACb,4BAAQgC,QAASF,KAAKT,IAAKhB,KAAK,SAASL,UAAU,0BAAnD,uB,GA7EJiC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.d557e4e2.chunk.js","sourcesContent":["import React from 'react';\n\nconst tinhTong = (props) => {\n    return (\n        <div className=\"col-sm-12 row\">\n            <div className=\"col-sm-3\">\n                <label>Số thứ {props.value}:</label>\n            </div>\n            \n            <div className=\"col-sm-9\">\n                <input className=\"form-control\" onChange={props.changed} required type=\"number\" placeholder={props.placeHolder}></input>\n            </div>\n        </div>\n    )\n};\n\nexport default tinhTong;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TinhTong from './formTinhTong/TinhTong'\n\nclass App extends Component {\n  state = {\n    result: '',\n    value1: '',\n    value2: ''\n  }\n\n  updateValue1 = (event) => {\n    this.setState({\n      value1: event.target.value\n    })\n    console.log(parseInt(this.state.value1))\n  }\n\n  updateValue2 = (event) => {\n    this.setState({\n      value2: event.target.value\n    })\n  }\n\n  Sum = () => {\n    this.setState({\n      result: (parseInt(this.state.value1,10) + parseInt(this.state.value2,10)).toString()\n    })\n    console.log(this.state.result)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                  Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <a\n                  className=\"App-link\"\n                  href=\"https://reactjs.org\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Learn React\n                </a>\n              </div>\n\n              <div className=\"col-sm-6\" id=\"tinhTong\">\n                <div className=\"container\">\n                  <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                      <h1>Tính tổng</h1>\n                    </div>\n                    <br></br>\n                    <br></br>\n                    <TinhTong \n                      value = '1'\n                      placeHolder = 'Nhập số thứ nhất'\n                      changed={this.updateValue1}\n                    />\n                    <TinhTong\n                      value = '2'\n                      placeHolder = 'Nhập số thứ hai'\n                      changed={this.updateValue2}\n                    />\n                    <div className=\"col-sm-12 row\">\n                      <div className=\"col-sm-3\">\n                        <label id=\"kq\">Kết quả:</label>\n                      </div>\n                      <div className=\"col-sm-9\">\n                        <input disabled value={this.state.result} className=\"form-control\"></input>\n                      </div>\n                    </div>\n                    <br></br>\n                    <br></br>\n                    <div className=\"col-sm-12\">\n                      <button onClick={this.Sum} type=\"button\" className=\"btn btn-lg btn-success\">Tính</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}